"""
Usage
------

>> model = TSPModel()
>> # Apply changes to the model
>> solver = ORToolsSolver()
>> # Apply Changes to the solver
>> solution = solver.solve(model)


Supported Features (API)
----------------

Multiple Robots
>> model = TSPModel()
>> model.setNumRobot(num_robot)

Asymmetric Distances
E.g., one-way, varying speed
>> model.block_edge(i, j)

Timing Constraints
e.g., global, local time windows

Nonlinear costs
E.g., battery

Capacity
E.g. Carrying objects (vehicles, eggs), passengers

Repetitions
E.g., same tasks, multiple objects

Occupancy
E.g., sharing spaces, non-shareble space (1 robot at 1 location)


Future Supports
----------------
Probabilistic Events
E.g., Failures, MDP

Non-stochastic Events
E.g., road blockage, railway blockage
"""

# num_robot: 1
# depots: If provided as a global variable, this is prioritized.

EdgeCapacities: ["battery"]
NodeCapacities: ["payload"]
NodeOccupancies: ["vehicle_stock"] # Usually not needed UNLESS a node must be visited multiple times
# EdgeOccupancies: [""]
nodes:
  "A":
    payload:
    vehicle_stock:
  ":
    payload:
    vehicle_stock:
  "C":
    payload:
    vehicle_stock:
  "D":
    payload:
    vehicle_stock:
  "E":
    payload:
    vehicle_stock:
  "F":
    payload:
    vehicle_stock:

# Must be Symmetric. You can later define blockages
distance:
  - [0, 9, 5, 1, 1, 9]
  - [9, 0, 7, 8, -1, 4]
  - [4, 8, 0, 5, 8, 7]
  - [5, 3, 1, 0, 1, 6]
  - [7, 8, -1, 9, 0, 7]
  - [6, 3, 9, 4, 5, 0]
battery:
  - [0, 9, 5, 1, 1, 9]
  - [9, 0, 7, 8, -1, 4]
  - [4, 8, 0, 5, 8, 7]
  - [5, 3, 1, 0, 1, 6]
  - [7, 8, -1, 9, 0, 7]
  - [6, 3, 9, 4, 5, 0]

Robots:
  Chopin:
    ### No need to specify start and end
    # - start: "A"
    # - end: "B"
    assignments: ["task1"]
    velocity:
  Morzart:
    depot: "A" # depot == start&end
    velocity:
  Bach:
    start: "B"
    end: "D"
    assignments: ["task2", "task3"]
    velocity:

tasks:
  task1:
    start: "A"
    end: "A"
    service_time: 10
    standalone: true
    time_window: [10, 20]
  task2:
    start: "B"
    end: "C"
    service_time: 8
    time_window: [5, 15]
  task3:
    start: "E"
    end: "F"
    service_time: 12
    standalone: false
  task4: # bring vehicle -> Pickup and Delivery
    start: "A"
    end: "E"
    service_time: 10
    standalone: true
    pickupAndDelivery: true

repeats:
  - ["task1", "task2"]

global_time_constraints:
  task1: [10, 20]
  task2: [5, 15]
  task3: [0, 25]

local_time_constraints:
  task1:
    task2: []
    task3: []
  task2:
    task4: []

precedences:
  - ["task1", "task2"]
